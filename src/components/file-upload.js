// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
import { t } from './i18n.js';

class FileUploadManager {
  constructor() {
    this.maxFileSize = 5 * 1024 * 1024; // 5MB
    this.allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
  }

  init() {
    this.attachEventListeners();
    console.log('File upload system initialized');
  }

  attachEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Å—Ç–∞
    const placeImageInput = document.getElementById('place-image-upload');
    const placeImagePreview = document.getElementById('place-image-preview');
    
    if (placeImageInput) {
      placeImageInput.addEventListener('change', (e) => {
        this.handleFileSelect(e, placeImagePreview, 'place');
      });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
    const avatarInput = document.getElementById('avatar-upload');
    const avatarPreview = document.getElementById('avatar-preview');
    
    if (avatarInput) {
      avatarInput.addEventListener('change', (e) => {
        this.handleFileSelect(e, avatarPreview, 'avatar');
      });
    }
  }

  handleFileSelect(event, previewContainer, type) {
    const file = event.target.files[0];
    const uploadContainer = event.target.closest('.popup__file-upload');
    
    if (!file) {
      this.clearPreview(previewContainer, uploadContainer);
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    const validation = this.validateFile(file);
    if (!validation.isValid) {
      this.showError(uploadContainer, validation.error);
      event.target.value = ''; // –û—á–∏—â–∞–µ–º input
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    this.updateUploadUI(uploadContainer, file.name);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
    this.createPreview(file, previewContainer, uploadContainer, event.target);
  }

  validateFile(file) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (!this.allowedTypes.includes(file.type)) {
      return {
        isValid: false,
        error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG, PNG, GIF, WebP)'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if (file.size > this.maxFileSize) {
      return {
        isValid: false,
        error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB'
      };
    }

    return { isValid: true };
  }

  createPreview(file, previewContainer, uploadContainer, inputElement) {
    const reader = new FileReader();
    
    reader.onload = async (e) => {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–≤—å—é
      previewContainer.innerHTML = '';
      
      // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
      let imageData = e.target.result;
      const originalSize = imageData.length;
      
      try {
        imageData = await this.compressImage(imageData, 0.8); // 80% –∫–∞—á–µ—Å—Ç–≤–∞
        const compressedSize = imageData.length;
        const savings = ((originalSize - compressedSize) / originalSize * 100).toFixed(1);
        console.log(`üóúÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ –Ω–∞ ${savings}% (${(originalSize/1024).toFixed(1)}KB ‚Üí ${(compressedSize/1024).toFixed(1)}KB)`);
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª:', error);
      }
      
      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–µ–≤—å—é
      const img = document.createElement('img');
      img.src = imageData;
      img.alt = 'Preview';
      
      const removeBtn = document.createElement('button');
      removeBtn.className = 'popup__image-preview-remove';
      removeBtn.innerHTML = '<i class="fa-solid fa-times"></i>';
      removeBtn.type = 'button';
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é
      removeBtn.addEventListener('click', () => {
        this.clearPreview(previewContainer, uploadContainer);
        inputElement.value = '';
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      previewContainer.appendChild(img);
      previewContainer.appendChild(removeBtn);
      previewContainer.classList.add('has-image');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç—ã–π base64 –≤ data-–∞—Ç—Ä–∏–±—É—Ç–µ input'–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      inputElement.dataset.base64 = imageData;
    };
    
    reader.onerror = () => {
      this.showError(uploadContainer, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    };
    
    reader.readAsDataURL(file);
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  compressImage(base64String, quality = 0.8) {
    return new Promise((resolve, reject) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      img.onload = function() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        const maxWidth = 1200;  // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        const maxHeight = 900;
        
        let { width, height } = img;
        
        // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
        if (width > maxWidth || height > maxHeight) {
          const ratio = Math.min(maxWidth / width, maxHeight / height);
          width *= ratio;
          height *= ratio;
        }
        
        canvas.width = width;
        canvas.height = height;
        
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = 'high';
        
        ctx.drawImage(img, 0, 0, width, height);
        
        // –°–∂–∏–º–∞–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        const compressedBase64 = canvas.toDataURL('image/jpeg', quality);
        resolve(compressedBase64);
      };
      
      img.onerror = () => {
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∂–∞—Ç–∏—è'));
      };
      
      img.src = base64String;
    });
  }

  updateUploadUI(uploadContainer, fileName) {
    uploadContainer.classList.remove('error');
    uploadContainer.classList.add('has-file');
    
    const label = uploadContainer.querySelector('.popup__file-label span');
    if (label) {
      label.textContent = `${t('forms.file_selected')}: ${fileName}`;
    }
  }

  showError(uploadContainer, errorMessage) {
    uploadContainer.classList.remove('has-file');
    uploadContainer.classList.add('error');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast –∏–ª–∏ –¥—Ä—É–≥–æ–π UI —ç–ª–µ–º–µ–Ω—Ç)
    console.error('File upload error:', errorMessage);
    
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ UI
    const label = uploadContainer.querySelector('.popup__file-label span');
    if (label) {
      const originalText = label.textContent;
      label.textContent = errorMessage;
      label.style.color = '#e74c3c';
      
      setTimeout(() => {
        label.textContent = originalText;
        label.style.color = '';
        uploadContainer.classList.remove('error');
      }, 3000);
    }
  }

  clearPreview(previewContainer, uploadContainer) {
    previewContainer.innerHTML = '';
    previewContainer.classList.remove('has-image');
    uploadContainer.classList.remove('has-file', 'error');
    
    const label = uploadContainer.querySelector('.popup__file-label span');
    if (label) {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ data-i18n
      const i18nKey = label.getAttribute('data-i18n');
      if (i18nKey) {
        label.textContent = t(i18nKey);
      }
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ input'–∞
  getImageBase64(inputId) {
    const input = document.getElementById(inputId);
    return input?.dataset.base64 || null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ñ–∞–π–ª
  hasFile(inputId) {
    const input = document.getElementById(inputId);
    return input?.files.length > 0;
  }

  // –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
  resetFileUpload(inputId) {
    const input = document.getElementById(inputId);
    if (!input) return;

    const uploadContainer = input.closest('.popup__file-upload');
    const previewContainer = input.parentElement.querySelector('.popup__image-preview');
    
    if (uploadContainer && previewContainer) {
      // –û—á–∏—â–∞–µ–º input
      input.value = '';
      delete input.dataset.base64;
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–≤—å—é –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      this.clearPreview(previewContainer, uploadContainer);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const fileUploadManager = new FileUploadManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
export function initFileUpload() {
  fileUploadManager.init();
}

export function getImageBase64(inputId) {
  return fileUploadManager.getImageBase64(inputId);
}

export function hasFile(inputId) {
  return fileUploadManager.hasFile(inputId);
}

export function resetFileUpload(inputId) {
  return fileUploadManager.resetFileUpload(inputId);
} 